{"version":3,"file":"online_subscribers.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA,+BAA+B,aAAa;AAC5C;AACA,0CAA0C,aAAa;AACvD;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA,mCAAmC,iBAAiB;AACpD;AACA,wDAAwD,4BAA4B;AACpF;AACA;AACA;AACA,8DAA8D,iBAAiB;AAC/E;AACA;AACA,wDAAwD,6BAA6B;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACO;AACP;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,oBAAoB,mBAAmB;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACO;AACP;AACA,gBAAgB,iDAAiD;AACjE;AACA,KAAK;AACL;;;;;;;UC7EA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNgJ;AAC3F;AACrD,mDAAmD,cAAc;AACjE;AACA,+CAA+C,+DAA+D;AAC9G;AACA,mDAAmD,+DAA+D;AAClH,KAAK;AACL,IAAI,kFAAyB;AAC7B,yDAAyD,yFAAyF;AAClJ,QAAQ,8DAAU,0BAA0B,mBAAmB;AAC/D,KAAK;AACL,CAAC;AACD,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA,YAAY,8EAAqB;AACjC;AACA;AACA;AACA;AACA,YAAY,6EAAoB;AAChC;AACA;AACA;AACA;AACA,YAAY,gFAAuB;AACnC;AACA;AACA;AACA,CAAC","sources":["webpack://communications/./apps/calls/ts/components/notify/index.ts","webpack://communications/./apps/calls/ts/components/subscribers/index.ts","webpack://communications/webpack/bootstrap","webpack://communications/webpack/runtime/define property getters","webpack://communications/webpack/runtime/hasOwnProperty shorthand","webpack://communications/webpack/runtime/make namespace object","webpack://communications/./apps/calls/ts/scripts/subscribers/main.ts"],"sourcesContent":["const NOTIFY_CLASS = 'notify';\nconst NOTIFY_ACTIVE_CLASS = `${NOTIFY_CLASS}--active`;\nconst NOTIFY_TEXT_CLASS = 'notify__text';\nconst notify = document.querySelector(`.${NOTIFY_CLASS}`);\nif (!notify) {\n    throw Error('Not found notify container!');\n}\nconst notifyText = notify.querySelector(`.${NOTIFY_TEXT_CLASS}`);\nif (!notifyText) {\n    throw Error('Not found notify text container!');\n}\nexport const closeNotify = () => notify.classList.remove(NOTIFY_ACTIVE_CLASS);\nlet notifyTimeoutId;\nexport const showNotify = (message, timeout = Infinity) => {\n    clearTimeout(notifyTimeoutId);\n    notifyText.textContent = message;\n    notify.classList.add(NOTIFY_ACTIVE_CLASS);\n    if (timeout !== Infinity) {\n        notifyTimeoutId = setTimeout(closeNotify, timeout);\n    }\n};\n","const SUBSCRIBERS_CONTAINER_CLASS = 'subscribers';\nconst SUBSCRIBER_CLASS = 'subscribers__item';\nconst SUBSCRIBER_ACTIVE_CLASS = `${SUBSCRIBER_CLASS}--active`;\nconst SUBSCRIBER_CALL_BUTTON_CLASS = 'subscribers__call-button';\nconst subscribersContainer = document.querySelector(`.${SUBSCRIBERS_CONTAINER_CLASS}`);\nif (!subscribersContainer) {\n    throw Error('Not found the subscribers container!');\n}\nconst subscribers = subscribersContainer.querySelectorAll(`.${SUBSCRIBER_CLASS}`);\nconst goTroughSubscribers = (callback) => {\n    for (const subscriber of subscribers) {\n        const callButton = subscriber.querySelector(`.${SUBSCRIBER_CALL_BUTTON_CLASS}`);\n        if (!callButton) {\n            throw Error('Not found a call button in a subscriber!');\n        }\n        const needBreak = callback(subscriber, callButton);\n        if (needBreak) {\n            break;\n        }\n    }\n};\nconst getSubscriberData = (subscriber) => {\n    const subscriberId = subscriber.dataset.subscriberId;\n    const subscriberFullName = subscriber.dataset.subscriberFullName;\n    if (!subscriberId || !subscriberFullName) {\n        throw Error('Not found subscriber id or full name in dataset in the current subscriber!');\n    }\n    return { id: subscriberId, fullName: subscriberFullName };\n};\nexport const markOnlineSubscribers = (ids) => {\n    goTroughSubscribers((subscriber, callButton) => {\n        const { id: subscriberId } = getSubscriberData(subscriber);\n        if (ids[subscriberId]) {\n            subscriber.classList.add(SUBSCRIBER_ACTIVE_CLASS);\n            callButton.disabled = false;\n        }\n        else {\n            subscriber.classList.remove(SUBSCRIBER_ACTIVE_CLASS);\n            callButton.disabled = true;\n        }\n    });\n};\nconst onlineUsersHistory = {};\nexport const markOnlineSubscriber = (id) => {\n    if (onlineUsersHistory[id]) {\n        clearTimeout(onlineUsersHistory[id]);\n        delete onlineUsersHistory[id];\n        return;\n    }\n    goTroughSubscribers((subscriber, callButton) => {\n        const { id: subscriberId } = getSubscriberData(subscriber);\n        if (subscriberId === id) {\n            subscriber.classList.add(SUBSCRIBER_ACTIVE_CLASS);\n            callButton.disabled = false;\n            return true;\n        }\n    });\n};\nexport const discardOnlineSubscriber = (id) => {\n    const discardUserEvent = setTimeout(() => {\n        goTroughSubscribers((subscriber, callButton) => {\n            const { id: subscriberId } = getSubscriberData(subscriber);\n            if (subscriberId === id) {\n                subscriber.classList.remove(SUBSCRIBER_ACTIVE_CLASS);\n                callButton.disabled = true;\n                return true;\n            }\n        });\n        delete onlineUsersHistory[Number(discardUserEvent)];\n    }, 10000);\n    onlineUsersHistory[Number(discardUserEvent)] = discardUserEvent;\n};\nexport const setCallButtonClickHandler = (callback) => {\n    goTroughSubscribers((subscriber, callButton) => {\n        const { id: subscriberId, fullName: subscriberFullName } = getSubscriberData(subscriber);\n        callButton.onclick = () => callback(subscriberId, subscriberFullName);\n    });\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { markOnlineSubscribers, markOnlineSubscriber, discardOnlineSubscriber, setCallButtonClickHandler, } from '../../components/subscribers';\nimport { showNotify } from '../../components/notify';\nconst subscribersWebSocket = new WebSocket(`ws://${location.host}/subscribers/`);\nsubscribersWebSocket.addEventListener('open', () => {\n    subscribersWebSocket.send(JSON.stringify({ type: \"subscribers.online\" /* ActionType.subscribersOnline */ }));\n    window.addEventListener('focus', () => {\n        subscribersWebSocket.send(JSON.stringify({ type: \"subscribers.online\" /* ActionType.subscribersOnline */ }));\n    });\n    setCallButtonClickHandler((subscriberId, subscriberFullName) => {\n        window.callOffersWebSocket.send(JSON.stringify({ type: \"offer.connection\" /* callOffersActionType.offerConnection */, data: subscriberId }));\n        showNotify(`You offered the user: ${subscriberFullName}`);\n    });\n});\nsubscribersWebSocket.addEventListener('message', ({ data }) => {\n    const parsedData = JSON.parse(data);\n    switch (parsedData.type) {\n        case \"subscribers.online\" /* ActionType.subscribersOnline */: {\n            const onlineSubscribersIds = parsedData.data;\n            markOnlineSubscribers(onlineSubscribersIds);\n            break;\n        }\n        case \"subscriber.invite\" /* ActionType.subscriberInvite */: {\n            const subscriberId = parsedData.data;\n            markOnlineSubscriber(subscriberId);\n            break;\n        }\n        case \"subscriber.discard\" /* ActionType.subscriberDiscard */: {\n            const subscriberId = parsedData.data;\n            discardOnlineSubscriber(subscriberId);\n            break;\n        }\n    }\n});\n"],"names":[],"sourceRoot":""}