{"version":3,"file":"call_rooms.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wCAAwC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,qBAAqB,kCAAkC;AACvD,sBAAsB,kCAAkC;AACxD;AACA,SAAS;AACT,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,+DAA+D;AACvG;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,qDAAqD,cAAc,cAAc,QAAQ;AACzF,wFAAwF,MAAM;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,gCAAgC,SAAS;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACU","sources":["webpack://communications/webpack/bootstrap","webpack://communications/webpack/runtime/make namespace object","webpack://communications/./apps/calls/ts/scripts/call_rooms/main.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst localeVideo = document.querySelector('.video__current-user');\nconst remoteVideo = document.querySelector('.video__another-user');\nif (!localeVideo) {\n    throw Error('Not found locale video container!');\n}\nif (!remoteVideo) {\n    throw Error('Not found remote video container!');\n}\nconst servers = {\n    iceServers: [{ urls: ['stun:stun.l.google.com:19302'] }],\n};\nconst peerConnection = new RTCPeerConnection(servers);\npeerConnection.onconnectionstatechange = (event) => {\n    console.log(event);\n    console.log('change ebuchiq state');\n};\nsetInterval(() => {\n    console.log(peerConnection.signalingState);\n}, 50);\nconst getLocalMediaStream = () => __awaiter(void 0, void 0, void 0, function* () {\n    return yield navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: {\n            width: { min: 640, ideal: 1920, max: 1920 },\n            height: { min: 480, ideal: 1080, max: 1080 },\n            facingMode: 'user',\n        },\n    });\n});\nconst createLocaleMediaStream = () => __awaiter(void 0, void 0, void 0, function* () {\n    let localMediaStream;\n    try {\n        localMediaStream = yield getLocalMediaStream();\n    }\n    catch (error) {\n        console.error(error);\n        throw error;\n    }\n    localeVideo.srcObject = localMediaStream;\n    return localMediaStream;\n});\nconst createRemoteMediaStream = () => {\n    const remoteMediaStream = new MediaStream();\n    remoteVideo.srcObject = remoteMediaStream;\n    return remoteMediaStream;\n};\nconst createOffer = (webSocket) => __awaiter(void 0, void 0, void 0, function* () {\n    let isSended = false;\n    peerConnection.onicecandidate = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (isSended) {\n            return;\n        }\n        webSocket.send(JSON.stringify({\n            type: \"offer.send\" /* ActionType.offerSend */,\n            data: offer,\n        }));\n        isSended = true;\n    });\n    const offer = yield peerConnection.createOffer();\n    peerConnection.setLocalDescription(offer);\n});\nconst createAnswer = (webSocket, offer) => __awaiter(void 0, void 0, void 0, function* () {\n    let isSended = false;\n    peerConnection.onicecandidate = () => {\n        if (isSended) {\n            return;\n        }\n        webSocket.send(JSON.stringify({ type: \"answer.send\" /* ActionType.answerSend */, data: answer }));\n        isSended = true;\n    };\n    yield peerConnection.setRemoteDescription(offer);\n    const answer = yield peerConnection.createAnswer();\n    yield peerConnection.setLocalDescription(answer);\n});\nconst setAnswer = (answer) => __awaiter(void 0, void 0, void 0, function* () {\n    yield peerConnection.setRemoteDescription(answer);\n    setTimeout(() => console.log(peerConnection.connectionState, peerConnection.localDescription, peerConnection.remoteDescription, peerConnection.signalingState), 2000);\n});\nconst createWebSocket = () => __awaiter(void 0, void 0, void 0, function* () {\n    const room_id = location.pathname.split('/').at(-1);\n    const callRoomsWebSocket = new WebSocket(`ws://${location.host}/call-rooms/${room_id}/`);\n    callRoomsWebSocket.onmessage = (_a) => __awaiter(void 0, [_a], void 0, function* ({ data }) {\n        const parsed_data = JSON.parse(data);\n        console.log(parsed_data);\n        switch (parsed_data.type) {\n            case \"offer.create\" /* ActionType.offerCreate */: {\n                yield createOffer(callRoomsWebSocket);\n                break;\n            }\n            case \"answer.create\" /* ActionType.answerCreate */: {\n                yield createAnswer(callRoomsWebSocket, parsed_data['data']);\n                break;\n            }\n            case \"answer.get\" /* ActionType.answerGet */: {\n                yield setAnswer(parsed_data['data']);\n                break;\n            }\n        }\n    });\n});\nconst init = () => __awaiter(void 0, void 0, void 0, function* () {\n    const localMediaStream = yield createLocaleMediaStream();\n    const remoteMediaStream = createRemoteMediaStream();\n    localMediaStream.getTracks().forEach((track) => {\n        peerConnection.addTrack(track, localMediaStream);\n    });\n    peerConnection.ontrack = ({ streams }) => {\n        streams[0].getTracks().forEach((track) => {\n            remoteMediaStream.addTrack(track);\n        });\n    };\n    yield createWebSocket();\n});\ninit();\nexport {};\n"],"names":[],"sourceRoot":""}